Img restart ploicy:
The Always restart policy is the default policy in Kubernetes.
By using this policy, containers will restart when they terminate, regardless of their exit status. In other words, this policy doesnâ€™t care why the container exited, whether it is a successful completion or an error. It will always make sure that the container is running.

The OnFailure restart policy will restart a container only if the container process exits with an error



ImagePullBackoff:
invalid image, improper permissions
if your image is a private image, use imagepullsecret( imagepull secret can be added to my deploymenr file like any other info but we first create secret using a k8 command)
first when we give an invalid image name, we get ErrorImagepull error whicb is followed by imagepullbf, k8 waits for sometime tries again and this goes on by adding a delay

crashloopbackoff: pod is grtting crsahed multiple times. k8 is trying to start the pod doing backoff delay, may be caused by configuration mistakes of giving wrong env variables, memory limits
container creating->error->crashloopbackoff->error->loop
liveness proble failing - k8 tries to restart the pod, period healthcheck informs pod how often to check health of the pod
resource quota - namespace level vs resurce limit -pod level

Detailed Explanation of Different Image Pull Policies
Always: This policy forces Kubernetes always to pull the image from the repository, regardless of whether it is already present on the node. It ensures that the container always uses the latest version of the image, making it ideal for development environments where updates are frequent.
IfNotPresent: Kubernetes will pull the image if it is not already present on the node. If the image is on the node, it won't attempt to pull it again. This policy is a balance between resource utilization and ensuring currency. It is useful in production environments where stability and resource optimization are crucial.
Never: With this policy, Kubernetes will never pull the image from the repository. It will strictly use local images. This policy is suitable for scenarios where you're using custom or pre-loaded images and don't want any automatic updates from remote repositories.


troubleshoot nodes:
we can do it with kubectl describe nodes nodename
its shows outofdisk, memoryptressure, diskpressuree, ready these kind of flgas, we can check the node health depending on this (true/false)

check status:
service kubelet status


